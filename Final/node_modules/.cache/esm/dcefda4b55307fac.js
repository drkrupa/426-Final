let express,parseGet,parsePost,parseDelete,authenticateUser;_553‍.x([["router",()=>router],["prefix",()=>prefix]]);_553‍.w("express",[["default",["express"],function(v){express=v}]]);_553‍.w("../middlewares/parse_get",[["parseGet",["parseGet"],function(v){parseGet=v}]]);_553‍.w("../middlewares/parse_post",[["parsePost",["parsePost"],function(v){parsePost=v}]]);_553‍.w("../middlewares/parse_delete",[["parseDelete",["parseDelete"],function(v){parseDelete=v}]]);_553‍.w("../middlewares/auth",[["authenticateUser",["authenticateUser"],function(v){authenticateUser=v}]]);





       const router = express.Router();
       const prefix = '/private';

const {privateStore} = require('../data/DataStore');

/**
 * Every request to this route needs
 * to be made from an authenticated user.
 */
router.use(authenticateUser);

router.get('/*', parseGet, function (req, res) {
  const result = req.handleGet(privateStore);
  if (typeof result !== 'undefined') {
    res.send({result})
  }
});

router.post('/*', parsePost, function (req, res) {
  const result = req.handlePost(privateStore);
  if (typeof result !== 'undefined') {
    res.send({result})
  }
});

router.delete('/*', parseDelete, function (req, res) {
  const result = req.handleDelete(privateStore);
  if (typeof result !== 'undefined') {
    res.send({result})
  }
});
